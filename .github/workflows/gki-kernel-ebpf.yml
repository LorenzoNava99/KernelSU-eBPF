name: GKI Kernel Build with eBPF

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: >
          Output directory of gki,
          for example: android12-5.10
      version_name:
        required: true
        type: string
        description: >
          With SUBLEVEL of kernel,
          for example: android12-5.10.66
      tag:
        required: true
        type: string
        description: >
          Part of branch name of common kernel manifest,
          for example: android12-5.10-2021-11
      os_patch_level:
        required: false
        type: string
        description: >
          Patch level of common kernel manifest,
          for example: 2021-11
        default: 2022-05
      patch_path:
        required: false
        type: string
        description: >
          Directory name of .github/patches/<patch_path>
          for example: 5.10
      use_cache:
        required: false
        type: boolean
        default: true
      embed_ksud:
        required: false
        type: string
        default: ""
        description: >
          Artifact name of prebuilt ksud to be embedded
          for example: ksud-aarch64-linux-android
      debug:
        required: false
        type: boolean
        default: false
      build_lkm:
        required: false
        type: boolean
        default: false
    secrets:
      BOOT_SIGN_KEY:
        required: false
      CHAT_ID:
        required: false
      BOT_TOKEN:
        required: false
      MESSAGE_THREAD_ID:
        required: false

jobs:
  build:
    name: Build ${{ inputs.version_name }} with eBPF
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup need_upload
        id: need_upload
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            echo "UPLOAD=true" >> $GITHUB_OUTPUT
          else
            echo "UPLOAD=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup kernel source
        run: |
          echo "Free space:"
          df -h
          cd $GITHUB_WORKSPACE
          sudo apt-get install repo -y
          mkdir android-kernel && cd android-kernel
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          repo sync -j$(nproc --all) --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune

      - name: Setup KernelSU with eBPF
        env:
          IS_DEBUG_KERNEL: ${{ inputs.debug }}
        run: |
          GKI_ROOT=$GITHUB_WORKSPACE/android-kernel
          echo "[+] GKI_ROOT: $GKI_ROOT"

          # Link KernelSU
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $GKI_ROOT/common/drivers/kernelsu

          # Add KernelSU to build
          DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
          DRIVER_KCONFIG=$GKI_ROOT/common/drivers/Kconfig
          grep -q "kernelsu" "$DRIVER_MAKEFILE" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> "$DRIVER_MAKEFILE"
          grep -q "kernelsu" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\\source \"drivers/kernelsu/Kconfig\"" "$DRIVER_KCONFIG"

          # Apply eBPF configuration via fragments (NOT modifying gki_defconfig directly)
          echo "[+] Setting up eBPF configuration fragments"
          CONFIG_DIR=$GKI_ROOT/common/arch/arm64/configs

          # Copy eBPF fragment
          cp $GITHUB_WORKSPACE/KernelSU/kernel/ebpf_enhanced_config.fragment $CONFIG_DIR/ebpf_config.fragment

          # Update build.config to use fragments properly
          BUILD_CONFIG=$GKI_ROOT/common/build.config.gki.aarch64
          if [ -f "$BUILD_CONFIG" ]; then
            echo "[+] Adding eBPF fragment to build config"
            # Check if DEFCONFIG_FRAGMENT is already set
            if grep -q "^DEFCONFIG_FRAGMENT=" $BUILD_CONFIG; then
              # Append to existing DEFCONFIG_FRAGMENT
              sed -i '/^DEFCONFIG_FRAGMENT=/s|"$| ${ROOT_DIR}/${KERNEL_DIR}/arch/arm64/configs/ebpf_config.fragment"|' $BUILD_CONFIG
            else
              # Create new DEFCONFIG_FRAGMENT
              echo "DEFCONFIG_FRAGMENT=\"\${ROOT_DIR}/\${KERNEL_DIR}/arch/arm64/configs/ebpf_config.fragment\"" >> $BUILD_CONFIG
            fi
          fi

          echo "[+] Apply Compilation Patches"
          if [ ! -e build/build.sh ]; then
            GLIBC_VERSION=$(ldd --version 2>/dev/null | head -n 1 | awk '{print $NF}')
            echo "GLIBC_VERSION: $GLIBC_VERSION"
            if [ "$(printf '%s\n' "2.38" "$GLIBC_VERSION" | sort -V | head -n1)" = "2.38" ]; then
              echo "Patching resolve_btfids/Makefile"
              cd $GKI_ROOT/common/ && sed -i '/\$(Q)\$(MAKE) -C \$(SUBCMD_SRC) OUTPUT=\$(abspath \$(dir \$@))\/ \$(abspath \$@)/s//$(Q)$(MAKE) -C $(SUBCMD_SRC) EXTRA_CFLAGS="$(CFLAGS)" OUTPUT=$(abspath $(dir $@))\/ $(abspath $@)/' tools/bpf/resolve_btfids/Makefile || echo "No patch needed."
            fi
          fi

          if [ "$IS_DEBUG_KERNEL" = "true" ]; then
            echo "[+] Enable debug features for kernel"
            printf "\nccflags-y += -DCONFIG_KSU_DEBUG\n" >> $GITHUB_WORKSPACE/KernelSU/kernel/Makefile
          fi
          repo status
          echo "[+] KernelSU with eBPF setup done."

      - name: Apply patches
        if: ${{ inputs.patch_path != '' }}
        run: |
          cd android-kernel
          git config --global user.email "bot@kernelsu.org"
          git config --global user.name "KernelSUBot"
          for patch in $GITHUB_WORKSPACE/KernelSU/.github/patches/${{ inputs.patch_path }}/*.patch; do
            if [ -f "$patch" ]; then
              patch_name=$(basename "$patch")
              echo "[+] Applying $patch_name"
              cd common && git am "$patch" || echo "[-] Failed to apply $patch_name" && cd ..
            fi
          done

      - name: Setup for KSUD placeholder
        run: |
          # Create placeholder ksud files for build compatibility
          cd android-kernel
          rm -rf $GITHUB_WORKSPACE/KernelSU/userspace/ksud/ksud
          mkdir -p $GITHUB_WORKSPACE/KernelSU/userspace/ksud/ksud/aarch64
          touch $GITHUB_WORKSPACE/KernelSU/userspace/ksud/ksud/aarch64/ksud
          mkdir -p $GITHUB_WORKSPACE/KernelSU/userspace/ksud/ksud/x86_64
          touch $GITHUB_WORKSPACE/KernelSU/userspace/ksud/ksud/x86_64/ksud
          echo "[+] Created placeholder ksud files for eBPF build"

      - name: Prepare Signing Kernel
        working-directory: android-kernel
        run: |
          # Fix bazel build error
          if [ -f common/BUILD.bazel ]; then
            [ -f android/abi_gki_protected_exports_aarch64 ] || sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' common/BUILD.bazel
          fi

          rm common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          git config --global user.email "bot@kernelsu.org"
          git config --global user.name "KernelSUBot"
          cd common/ && git add -A && git commit -a -m "Add KernelSU with eBPF"
          repo status

      - name: Build Kernel/LKM with eBPF
        working-directory: android-kernel
        run: |
          if [ ! -z ${{ vars.EXPECTED_SIZE }} ] && [ ! -z ${{ vars.EXPECTED_HASH }} ]; then
            export KSU_EXPECTED_SIZE=${{ vars.EXPECTED_SIZE }}
            export KSU_EXPECTED_HASH=${{ vars.EXPECTED_HASH }}
          fi

          # Ensure eBPF configs are applied
          echo "[+] Verifying eBPF configuration in build"

          if [ -e build/build.sh ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          fi

      - name: Prepare artifacts
        id: prepareArtifacts
        run: |
          OUTDIR=android-kernel/out/${{ inputs.version }}/dist
          if [ ! -e $OUTDIR ]; then
            OUTDIR=android-kernel/dist
          fi
          mkdir output
          if [ "${{ inputs.build_lkm}}" = "true" ]; then
            llvm-strip-15 -d $OUTDIR/kernelsu.ko
            mv $OUTDIR/kernelsu.ko ./output/${{ inputs.version }}_kernelsu_ebpf.ko
          else
            cp $OUTDIR/Image ./output/Image_ebpf
            cp $OUTDIR/Image.lz4 ./output/Image_ebpf.lz4
            git clone https://github.com/Kernel-SU/AnyKernel3
            rm -rf ./AnyKernel3/.git
            cp $OUTDIR/Image ./AnyKernel3/
          fi

      - name: Upload Image and Image.gz
        uses: actions/upload-artifact@v4
        if: ${{ inputs.build_lkm == false }}
        with:
          name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}_eBPF
          path: ./output/*

      - name: Upload AnyKernel3
        if: ${{ inputs.build_lkm == false }}
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}_eBPF
          path: ./AnyKernel3/*

      - name: Upload LKM
        uses: actions/upload-artifact@v4
        if: ${{ inputs.build_lkm == true }}
        with:
          name: ${{ inputs.version }}-lkm-ebpf
          path: ./output/*_kernelsu_ebpf.ko